/**-------------------------------------------------------
*
*   SASS VARIABLES: CONFIG
*
*--------------------------------------------------------*/
/**
*   IMPORT all variables in the varaiables directory
*/
@use 'sass:map' as map;
/**
*   IMPORT: FUNCTIONS
*/
@use '../functions' as *;

@use './colors' as *;
/**-------------------------------------------------------
*
*   GLOBALS
*
*--------------------------------------------------------*/
$SIZE: 'md';
$THEME: 'primary';
$HOVER: 10%;
/**-------------------------------------------------------
*
*   FONT
*
*--------------------------------------------------------*/
$font-sizes: (
    "xs": 0.425rem,
    "sm": 0.875rem,
    "md": 1.00rem,
    "lg": 1.25rem,
    "xl": 2.00rem
);
$font-weights: (
    'default': 400,
    'light': 300,
    'regular': 400,
    'medium': 500,
    'semibold': 600,
    'bold': 700,
    'extrabold': 800,
);
$font-family: 'Arial';
/**
*   line heights
*/
$font-line-heights: (
    'xs': 1,
    'sm': 1.125,
    'md': 1.25,
    'lg': 1.5,
    'xl': 1.75,
);
@mixin sizing-fonts($size, $weight: 'medium'){
    line-height: map.get($font-line-heights, $size);
    /*Check weight*/
    @if ($weight != 'medium'){
        $weight: map.get($font-weights, $weight);
    }
    font-weight: $weight;
    font-size: map.get($font-sizes, $size);
}
/**-------------------------------------------------------
*
*   SIZES: SPACING
*
*--------------------------------------------------------*/
$spacing-sizes: (
    "xs": 0.25rem,
    "sm": 0.50rem,
    "md": 1.00rem,
    "lg": 1.50rem,
    "xl": 2.00rem
);
@mixin sizing ($size){
    padding: map.get($spacing-sizes, $size);
    margin: map.get($spacing-sizes, $size);
}
@mixin sizing-button($size){
    padding: map.get($button-padding, $size);
    margin: map.get($spacing-sizes, $size);
}
@mixin background($theme:'default'){
    background-color: map.get($bg-colors, $theme);
}
@mixin background-hover($theme: 'default'){
    background-color: adjustColor(map.get($bg-colors, $theme), $HOVER);
}
/**-------------------------------------------------------
*
*   BORDERS
*
*--------------------------------------------------------*/
$border-widths: (
    'none': 0rem,
    'thin': 0.0625rem,
    'default': 0.125rem,
    'thick': 0.5rem
);
$border-style: solid;
$border-radius: 0.25rem;
/**-------------------------------------------------------
*
*   Default size
*
*--------------------------------------------------------*/
$size-default: 'md';
/**-------------------------------------------------------
*
*   BUTTON: SIZES
*
*--------------------------------------------------------*/
$button-padding: (
    'xs': 0.5rem 1rem,
    'sm': 0.75rem 1.5rem,
    'md': 1rem 2rem,
    'lg': 1.25rem 2.5rem,
    'xl': 1.5rem 3rem,
);
/**-------------------------------------------------------
*
*   TRANSITIONS
*
*--------------------------------------------------------*/
$transitions: (
    "fast": 0.2s ease-in-out,
    "medium": 0.3s ease-in-out,
    "slow": 0.5s ease-in-out,
    "none": 0s
);
/**-------------------------------------------------------
*
*   CONFIG MAP
*
*--------------------------------------------------------*/
$config-map: ();
/**-------------------------------------------------------
*
*   Generate Border
*
*--------------------------------------------------------*/
@mixin border($theme: 'default', $width: 'thin', $style: $border-style, $radius: $border-radius){
    /**
    *   parse default values
    */
    $color: map.get($border-colors, $theme);
    $width: map.get($border-widths, $width);
    /**
    *   assign properties
    */
    border: $width $style $color;
    border-radius: $radius;
}
/**-------------------------------------------------------
*
*   Events
*   Generate States
*
*--------------------------------------------------------*/
$events: ('default', 'hover', 'focus', 'active');
/**-------------------------------------------------------
*
*   UTILITY MIXIN
*   nest
*   nestBehavior
*
*--------------------------------------------------------*/
@mixin nestBehavior($behaviors...){
    /**
    *   validate type
    */
    $type: getType($behaviors);
    @if $type == 'list' or $type == 'arglist' {
        /**
        *   loop arglist
        */
        @each $behavior in $behaviors {
            /**
            *   validate behavior
            */
            &:#{$behavior} {
                @content;
            }
        }
    }
}
/**-------------------------------------------------------
*
*   DEBUGGING
*
*--------------------------------------------------------*/
