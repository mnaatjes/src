/**-------------------------------------------------------
*
*   SASS FUNCTIONS
*
*--------------------------------------------------------*/
/**
*   IMPORTS
*/
@use 'sass:map' as map;
@use 'sass:meta' as meta;
@use 'sass:list' as list;
@use 'sass:color' as color;
@use './functions/utils';
@use './functions/lists';
/**
*   FORWARD
*/
@forward './functions/utils';
@forward './functions/lists';
/**-------------------------------------------------------
*
* UTILITY FUNCTIONS
*
*--------------------------------------------------------*/
/**
*   isNestedMap
*/
@function isNestedMap($value){
    @return type-of($value) == 'map';
}
/**
*   hasKey
*/
@function hasKey($map, $key){
    @if map.get($map, $key) == null {
        @return false;
    } @else {
        @return true;
    }
}
/**
*   hasKeys
*/
@function map-hasKeys($map, $list){
    /**
    *   get keys from map
    */
    $keys: map.keys($map);
    /**
    *   loop keys and match check for indexes
    */
    @each $key in $keys {
        @if list.index($list, $key) == 0 {
            /**
            *   key not found
            */
            @return false;
        } @else {
            @return true;
        }
    }
}
/**-------------------------------------------------------
*
*   COLOR FUNCTIONS
*
*--------------------------------------------------------*/
/**
*   COLOR: LIGHTEN BACKGROUND
*/
@function adjustColor($color, $percentage){
    @return color.adjust($color, $lightness: $percentage);
}
/**
*   FONT COLORS
*/
@function generateFontColors($color-map, $percentage){
    $font-colors: ();
    /**
    *   push bg map
    */
    @each $name, $value in $color-map {
        $font-colors: map.merge($font-colors,
        (
            $name: adjustColor($value, $percentage)
    ))}
    /**
    *   return map
    */
    @return $font-colors;
}
/**
*   BACKGROUND COLORS
*/
@function generateBackgroundColors($color-map, $percentage){
    $bg-colors: ();
    /**
    *   push bg map
    */
    @each $name, $value in $color-map {
        $bg-colors: map.merge($bg-colors,
        (
            $name: adjustColor($value, $percentage)
    ))}
    /**
    *   return map
    */
    @return $bg-colors;
}
/**
*   BORDER FUNCTION
*/
@function generateBorderColors($color-map, $percentage){
    $border-colors: ();
    /**
    *   Loop color map and generate border variables
    */
    @each $name, $value in $color-map {
        $border-colors: map.merge($border-colors, 
        (
            $name: adjustColor($value, $percentage)
    ))}
    /**
    *   return map
    */
    @return $border-colors;
}